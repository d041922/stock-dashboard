import streamlit as st
import pandas as pd
import plotly.graph_objects as go
import yfinance as yf
import requests
import gspread
from gspread_dataframe import get_as_dataframe
import numpy as np

# --- ÌéòÏù¥ÏßÄ ÏÑ§Ï†ï ---
st.set_page_config(page_title="ROgicX ÏûëÏ†Ñ Î≥∏Î∂Ä v6.9", page_icon="ü§ñ", layout="wide")

# ==============================================================================
# --- Î™®Îì† Í≥ÑÏÇ∞ Ìï®Ïàò ---
# ==============================================================================
def calculate_rsi(close_prices, window=14):
    """RSI(ÏÉÅÎåÄÍ∞ïÎèÑÏßÄÏàò) Í≥ÑÏÇ∞"""
    delta = close_prices.diff()
    gain = (delta.where(delta > 0, 0)).rolling(window=window).mean()
    loss = (-delta.where(delta < 0, 0)).rolling(window=window).mean()
    rs = gain / loss
    rsi_series = 100 - (100 / (1 + rs))
    return rsi_series.fillna(100)

def calculate_volume_ratio(volume_series, window=20):
    """ÏµúÍ∑º Í±∞ÎûòÎüâ / 20Ïùº ÌèâÍ∑† Í±∞ÎûòÎüâ ÎπÑÏú® Í≥ÑÏÇ∞"""
    if len(volume_series) < window: return 1.0
    avg_volume = volume_series.rolling(window=window).mean().iloc[-1]
    last_volume = volume_series.iloc[-1]
    return (last_volume / avg_volume) if avg_volume > 1e-6 else 1.0

def get_price_change_rate(close_prices, window=3):
    """NÏùºÍ∞Ñ Í∞ÄÍ≤© Î≥ÄÎèôÎ•† Í≥ÑÏÇ∞"""
    if len(close_prices) < window:
        return 0
    return (close_prices.iloc[-1] / close_prices.iloc[-window] - 1) * 100

def calculate_bb_deviation(close_prices, window=20, num_std=2):
    """Î≥ºÎ¶∞Ï†Ä Î∞¥Îìú ÌïòÎã®ÏÑ† ÎåÄÎπÑ ÌòÑÏû¨Í∞ÄÏùò Ïù¥Í≤©ÎèÑÎ•º Í≥ÑÏÇ∞Ìï©ÎãàÎã§."""
    ma = close_prices.rolling(window=window).mean()
    std = close_prices.rolling(window=window).std()
    lower_band = ma - (num_std * std)
    last_price = close_prices.iloc[-1]
    last_lower_band = lower_band.iloc[-1]
    if last_lower_band == 0: return 0.0
    deviation = ((last_price / last_lower_band) - 1) * 100
    return deviation

# ==============================================================================
# --- v6.9 ÌïµÏã¨ Î∂ÑÏÑù Î™®Îìà (ÏµúÏ¢Ö Î≤ÑÏ†Ñ) ---
# ==============================================================================
def analyze_stock_v6_9(stock_info, tier, params):
    """
    'ÏßÄÎä•Ìòï Î†àÏù¥Îçî v6.9'Ïùò Í∑úÏπôÏóê Îî∞Îùº Ï¢ÖÎ™©ÏùÑ Î∂ÑÏÑùÌïòÍ≥† ÏÉÅÌÉúÎ•º ÏßÑÎã®Ìï©ÎãàÎã§.
    """
    if not stock_info or 'close_prices' not in stock_info or stock_info['close_prices'].empty:
        return None

    # --- 1. 5ÎåÄ Î∂ÑÏÑù ÏßÄÌëú Ï∂îÏ∂ú ---
    deviation = stock_info.get('deviation', 0)
    bb_lower_dev = stock_info.get('bb_lower_dev', 0)
    rsi = stock_info.get('rsi', 50)
    macd_cross = stock_info.get('macd_cross', False)
    macd_latest = stock_info.get('macd_latest', 0)
    signal_latest = stock_info.get('signal_latest', 0)
    volume_ratio = stock_info.get('volume_ratio', 0)
    price_change_rate = get_price_change_rate(stock_info['close_prices'], window=3)

    # --- 2. Ìã∞Ïñ¥Î≥Ñ Í∑úÏπô Ï†ÅÏö© ---
    tier_num_str = tier[5] if len(tier) > 5 and tier.startswith('Tier') else '4'
    
    price_attractive_bb = (bb_lower_dev <= params[f'tier{tier_num_str}_bb_dev'])
    price_attractive_ma = (deviation <= params[f'tier{tier_num_str}_ma_dev'])
    price_attractive = price_attractive_bb or price_attractive_ma

    energy_condensed = (rsi <= params[f'tier{tier_num_str}_rsi'])
    market_agreed = (volume_ratio >= params[f'tier{tier_num_str}_vol'])

    is_watching = False
    is_captured = False
    if tier in ['Tier 1', 'Tier 4']:
        is_watching = price_attractive and energy_condensed
        if is_watching and market_agreed:
            is_captured = True
    elif tier == 'Tier 2':
        is_watching = price_attractive and energy_condensed and macd_cross
        if is_watching and market_agreed:
            is_captured = True

    # --- 3. ÏÉÅÌÉú ÏÑ§Î™Ö Î∞è ÏàòÏπò ÌÖçÏä§Ìä∏ ÏÉùÏÑ± ---
    if price_attractive:
        price_desc_parts = []
        if price_attractive_bb: price_desc_parts.append(f"BB({bb_lower_dev:.1f}%)")
        if price_attractive_ma: price_desc_parts.append(f"MA({deviation:.1f}%)")
        price_text = " ".join(price_desc_parts)
    else:
        price_text = f"Í∏∞Ï§Ä ÎØ∏Îã¨ (BB:{bb_lower_dev:.1f}%, MA:{deviation:.1f}%)"
    
    energy_desc = "Í≥ºÎß§ÎèÑ" if rsi <= 35 else "Í≥ºÏó¥" if rsi >= 65 else "Ï§ëÎ¶Ω"
    energy_text = f"{energy_desc} (RSI:{rsi:.1f})"

    if macd_cross:
        trend_text = "ÏÉÅÏäπ Ï†ÑÌôò"
    else:
        trend_text = "ÏÉÅÏäπ Ï∂îÏÑ∏" if macd_latest > signal_latest else "ÌïòÎùΩ Ï∂îÏÑ∏"

    volume_desc = "Í∏âÏ¶ù" if volume_ratio >= 1.5 else "Î∂ÄÏ°±" if volume_ratio < 1.0 else "ÌèâÍ∑†"
    volume_text = f"{volume_desc} ({volume_ratio:.1f}Î∞∞)"

    # --- 4. ÏµúÏ¢Ö ÏÉÅÌÉú Î∞è Ïö∞ÏÑ†ÏàúÏúÑ Í≤∞Ï†ï ---
    status, status_order = "‚ö™Ô∏è ÏïàÏ†ï", 4
    if is_watching: status, status_order = "üü° Í∞êÏãú", 2
    if is_captured: status, status_order = "üü¢ Ìè¨Ï∞©", 1

    if price_change_rate <= -7 and status == "‚ö™Ô∏è ÏïàÏ†ï": status, status_order = "‚ö° Î≥ÄÎèôÏÑ±", 3
    if price_change_rate >= 7: status, status_order = "‚ö†Ô∏è Í≥ºÏó¥", 5

    # --- 5. ÏµúÏ¢Ö Í≤∞Í≥º Ìè¨Îß∑ÌåÖ ---
    return {
        'ÏÉÅÌÉú': status,
        'Ï¢ÖÎ™©Î™Ö': stock_info['name'],
        'Ìã∞Ïñ¥': tier,
        'Í∞ÄÍ≤© Îß§Î†•ÎèÑ': f"{'‚úÖ' if price_attractive else '‚ùå'} ({price_text})",
        'ÏóêÎÑàÏßÄ ÏùëÏ∂ï': f"{'‚úÖ' if energy_condensed else '‚ùå'} ({energy_text})",
        'Ï∂îÏÑ∏ Ï†ÑÌôò': f"{'‚úÖ' if macd_cross else '‚ùå'} ({trend_text})",
        'ÏãúÏû• ÎèôÏùò': f"{'‚úÖ' if market_agreed else '‚ùå'} ({volume_text})",
        'status_order': status_order
    }

# --- Îç∞Ïù¥ÌÑ∞ Î°úÎî© Ìï®Ïàò ---
@st.cache_data(ttl=600)
def load_data_from_gsheet():
    try:
        gc = gspread.service_account_from_dict(st.secrets["gcp_service_account"])
        SPREADSHEET_KEY = '1AG2QrAlcjksI2CWp_6IuL5jCrFhzpOGl7casHvFGvi8'
        spreadsheet = gc.open_by_key(SPREADSHEET_KEY)
        worksheet = spreadsheet.get_worksheet(0)
        df = get_as_dataframe(worksheet, evaluate_formulas=True)
        df = df.dropna(how='all').dropna(axis=1, how='all')
        return df
    except Exception as e:
        st.error(f"Google Sheets Îç∞Ïù¥ÌÑ∞Î•º Î∂àÎü¨Ïò§Îäî Îç∞ Ïã§Ìå®ÌñàÏäµÎãàÎã§: {e}")
        return None

def get_macro_data():
    macro_data = {}
    try:
        fng_response = requests.get("https://api.alternative.me/fng/?limit=1")
        macro_data['fng_value'] = int(fng_response.json()['data'][0]['value'])
    except Exception: macro_data['fng_value'] = None
    try:
        macro_data['vix'] = yf.Ticker("^VIX").history(period='1d')['Close'][0]
    except Exception: macro_data['vix'] = None
    try:
        dxy_data = yf.Ticker("DX-Y.NYB").history(period='5d')['Close']
        if len(dxy_data) >= 2: macro_data['dxy_change'] = (dxy_data.iloc[-1] / dxy_data.iloc[-2] - 1) * 100
        else: macro_data['dxy_change'] = 0
    except Exception: macro_data['dxy_change'] = 0
    try:
        oil_data = yf.Ticker("CL=F").history(period='5d')['Close']
        if len(oil_data) >= 2: macro_data['oil_change'] = (oil_data.iloc[-1] / oil_data.iloc[-2] - 1) * 100
        else: macro_data['oil_change'] = 0
    except Exception: macro_data['oil_change'] = 0
    return macro_data

@st.cache_data
def get_stock_data(tickers, stock_names):
    stock_data = {}
    ticker_to_name = dict(zip(tickers, stock_names))
    valid_tickers = [t for t in tickers if t and isinstance(t, str) and t != 'CASH']
    for ticker in valid_tickers:
        try:
            hist = yf.Ticker(ticker).history(period='1y')
            if not hist.empty and len(hist) > 50:
                # MACD Calculation for detailed trend status
                exp1 = hist['Close'].ewm(span=12, adjust=False).mean()
                exp2 = hist['Close'].ewm(span=26, adjust=False).mean()
                macd = exp1 - exp2
                signal_line = macd.ewm(span=9, adjust=False).mean()
                
                recent_macd = macd.iloc[-3:]
                recent_signal = signal_line.iloc[-3:]
                crossed_up = (recent_macd.shift(1) < recent_signal.shift(1)) & (recent_macd > recent_signal)

                stock_data[ticker] = {
                    'name': ticker_to_name.get(ticker, ticker),
                    'deviation': ((hist['Close'].iloc[-1] / hist['Close'].rolling(window=50).mean().iloc[-1]) - 1) * 100,
                    'bb_lower_dev': calculate_bb_deviation(hist['Close']),
                    'rsi': calculate_rsi(hist['Close']).iloc[-1],
                    'macd_cross': crossed_up.any(),
                    'macd_latest': macd.iloc[-1],
                    'signal_latest': signal_line.iloc[-1],
                    'volume_ratio': calculate_volume_ratio(hist['Volume']),
                    'close_prices': hist['Close']
                }
            else: stock_data[ticker] = None
        except Exception as e:
            st.error(f"Failed to get data for {ticker}: {e}")
            stock_data[ticker] = None
    return stock_data

# --- Î∂ÑÏÑù/Ìï¥ÏÑù Ìï®Ïàò ---
def calculate_opportunity_score(macro_data):
    reasons = {}
    fng_val, vix_val, dxy_change, oil_change = macro_data.get('fng_value'), macro_data.get('vix'), macro_data.get('dxy_change'), macro_data.get('oil_change')
    reasons['fng'] = 2 if fng_val is not None and fng_val <= 25 else 0
    reasons['vix'] = 2 if vix_val is not None and vix_val >= 30 else 0
    reasons['dxy'] = 1 if dxy_change is not None and dxy_change >= 0.5 else 0
    reasons['oil'] = 1 if oil_change is not None and oil_change <= -3.0 else 0
    return sum(reasons.values()), reasons

# --- UI Î†åÎçîÎßÅ ---
st.title("ü§ñ ROgicX ÏûëÏ†Ñ Î≥∏Î∂Ä v6.9 (Final)")

# --- Î™®Îìà 1: Ï†ÑÏû• ÏÉÅÌô©Ìåê ---
st.subheader("üåê Ï†ÑÏû• ÏÉÅÌô©Ìåê")
macro_data = get_macro_data()
total_score, score_reasons = calculate_opportunity_score(macro_data)
with st.expander("‚ÑπÔ∏è Ï†ÑÏû• ÏÉÅÌô©Ìåê ÏßÄÌëú Ìï¥ÏÑù"):
    st.markdown("""
    - **Í≥µÌè¨&ÌÉêÏöï ÏßÄÏàò:** ÏãúÏû•Ïùò Ïã¨Î¶¨Î•º ÎÇòÌÉÄÎÉÖÎãàÎã§. 'Í∑πÏã¨Ìïú Í≥µÌè¨'Îäî Ïó≠Î∞úÏÉÅ Ìà¨ÏûêÏùò Í∏∞ÌöåÍ∞Ä Îê† Ïàò ÏûàÏäµÎãàÎã§. **(‚â§25Ïãú +2Ï†ê)**
    - **VIX:** ÏãúÏû•Ïùò Î≥ÄÎèôÏÑ±(Î∂àÏïàÍ∞ê)ÏùÑ ÎÇòÌÉÄÎÉÖÎãàÎã§. ÏßÄÏàòÍ∞Ä ÎÜíÏùÑÏàòÎ°ù ÏãúÏû•Ïù¥ Î∂àÏïàÌïòÎã§Îäî ÎúªÏù¥Î©∞, Ïù¥Îäî Ï¢ÖÏ¢Ö Ï¢ãÏùÄ ÏûêÏÇ∞ÏùÑ Ïã∏Í≤å ÏÇ¥ Í∏∞ÌöåÎ•º ÏùòÎØ∏Ìï©ÎãàÎã§. **(‚â•30Ïãú +2Ï†ê)**
    - **Îã¨Îü¨Ïù∏Îç±Ïä§:** Îã¨Îü¨Ïùò Í∞ÄÏπò. Í∏âÎì±ÏùÄ ÏïàÏ†ÑÏûêÏÇ∞ ÏÑ†Ìò∏ Ïã¨Î¶¨Î•º ÏùòÎØ∏ÌïòÎ©∞, ÏãúÏû•Ïùò Î∂àÏïàÍ∞êÏùÑ ÎÇòÌÉÄÎÇ¥Îäî Ïã†Ìò∏ÏûÖÎãàÎã§. **(Ï†ÑÏùºÎπÑ ‚â•+0.5%Ïãú +1Ï†ê)**
    - **WTIÏú†Í∞Ä:** Íµ≠Ï†ú Ïú†Í∞Ä. Í∏âÎùΩÏùÄ Í≤ΩÍ∏∞ Ïπ®Ï≤¥Ïóê ÎåÄÌïú Ïö∞Î†§Î•º Î∞òÏòÅÌïòÎ©∞, Ï£ºÏãù ÏãúÏû•Ïùò ÌïòÎùΩ ÏïïÎ†•ÏúºÎ°ú ÏûëÏö©Ìï† Ïàò ÏûàÏäµÎãàÎã§. **(Ï†ÑÏùºÎπÑ ‚â§-3.0%Ïãú +1Ï†ê)**
    - **Ï¢ÖÌï© Í∏∞Ìöå ÏßÄÏàò:** ÏúÑ ÏßÄÌëúÎì§ÏùÑ Ï¢ÖÌï©ÌïòÏó¨, 'Ïó≠Îß§Ïàò ÏûëÏ†Ñ'Ïóê ÏñºÎßàÎÇò Ïú†Î¶¨Ìïú ÌôòÍ≤ΩÏù∏ÏßÄÎ•º Ï†êÏàòÌôîÌïú ROgicX ÏûêÏ≤¥ ÏßÄÌëúÏûÖÎãàÎã§.
    """)
cols = st.columns(5)
fng_val, vix_val, dxy_change, oil_change = macro_data.get('fng_value'), macro_data.get('vix'), macro_data.get('dxy_change'), macro_data.get('oil_change')
with cols[0]:
    st.metric("Í≥µÌè¨&ÌÉêÏöï", f"{fng_val}" if fng_val else "N/A"); score_text = f"**Ï†êÏàò: +{score_reasons['fng']}**"; st.markdown(f"{'üü¢' if score_reasons['fng']>0 else '‚ö™Ô∏è'} {score_text}")
with cols[1]:
    st.metric("VIX", f"{vix_val:.2f}" if vix_val else "N/A"); score_text = f"**Ï†êÏàò: +{score_reasons['vix']}**"; st.markdown(f"{'üü¢' if score_reasons['vix']>0 else '‚ö™Ô∏è'} {score_text}")
with cols[2]:
    st.metric("Îã¨Îü¨Ïù∏Îç±Ïä§(%)", f"{dxy_change:+.2f}%"); score_text = f"**Ï†êÏàò: +{score_reasons['dxy']}**"; st.markdown(f"{'üü°' if score_reasons['dxy']>0 else '‚ö™Ô∏è'} {score_text}")
with cols[3]:
    st.metric("WTIÏú†Í∞Ä(%)", f"{oil_change:+.2f}%"); score_text = f"**Ï†êÏàò: +{score_reasons['oil']}**"; st.markdown(f"{'üü°' if score_reasons['oil']>0 else '‚ö™Ô∏è'} {score_text}")
with cols[4]:
    guidance = "üî• Ïó≠Îß§Ïàò ÏûëÏ†Ñ Í≥†Î†§" if total_score >= 7 else "üü° Í∏∞Ìöå Í∞êÏãú Í∞ïÌôî" if total_score >= 4 else "‚ö™Ô∏è ÌõàÎ†®Ïùò ÎÇ†"
    st.metric("Ï¢ÖÌï© Í∏∞Ìöå ÏßÄÏàò", f"**{total_score}**"); st.markdown(f"**{guidance}**")


st.divider()

# --- Ìè¨Ìä∏Ìè¥Î¶¨Ïò§ Îç∞Ïù¥ÌÑ∞Î•º Î°úÎìúÌïòÏó¨ ÎÇòÎ®∏ÏßÄ Î™®Îìà ÌëúÏãú ---
df = load_data_from_gsheet()

if df is not None:
    tickers_to_fetch = df['Ï¢ÖÎ™©ÏΩîÎìú'].dropna().unique().tolist()
    stock_names_to_fetch = df['Ï¢ÖÎ™©Î™Ö'].dropna().unique().tolist()
    stock_data = get_stock_data(tickers_to_fetch, stock_names_to_fetch)
    total_score, _ = calculate_opportunity_score(macro_data)

    # --- Î™®Îìà 2: ÏïÑÍµ∞ ÌòÑÌô©Ìåê ---
    st.subheader("üìä ÏïÑÍµ∞ ÌòÑÌô©Ìåê")
    cash_df = df[(df['ÏûêÏÇ∞Ìã∞Ïñ¥'] == 'ÌòÑÍ∏à') & (df['Ï¢ÖÎ™©Î™Ö'] == 'CMA')]; available_cash = cash_df['ÌòÑÏû¨ÌèâÍ∞ÄÍ∏àÏï°'].sum()
    invested_df = df[~df['ÏûêÏÇ∞Ìã∞Ïñ¥'].isin(['ÌòÑÍ∏à', 'Í¥ÄÏã¨Ï¢ÖÎ™©', 'Tier 4', 'Í∏∞Î∞ò'])]; total_invested_value = invested_df['ÌòÑÏû¨ÌèâÍ∞ÄÍ∏àÏï°'].sum()
    tier_summary = invested_df.groupby('ÏûêÏÇ∞Ìã∞Ïñ¥')['ÌòÑÏû¨ÌèâÍ∞ÄÍ∏àÏï°'].sum().reset_index(); tier_summary['ÌòÑÏû¨ÎπÑÏ§ë(%)'] = (tier_summary['ÌòÑÏû¨ÌèâÍ∞ÄÍ∏àÏï°'] / total_invested_value) * 100 if total_invested_value > 0 else 0
    def parse_target(target_str):
        if not isinstance(target_str, str) or target_str.strip() in ['-', '']: return 0
        cleaned_str = target_str.replace('<', '').strip();
        if '-' in cleaned_str:
            try: parts = [float(p.strip()) for p in cleaned_str.split('-')]; return sum(parts) / len(parts) if len(parts) == 2 else 0
            except ValueError: return 0
        try: return float(cleaned_str)
        except ValueError: return 0
    target_df = df[['ÏûêÏÇ∞Ìã∞Ïñ¥', 'Î™©ÌëúÎπÑÏ§ë(%)']].dropna().drop_duplicates('ÏûêÏÇ∞Ìã∞Ïñ¥'); target_df['Î™©ÌëúÎπÑÏ§ë(%)'] = target_df['Î™©ÌëúÎπÑÏ§ë(%)'].apply(parse_target)
    tier_summary = pd.merge(tier_summary, target_df, on='ÏûêÏÇ∞Ìã∞Ïñ¥', how='left')
    core_gap = tier_summary[tier_summary['ÏûêÏÇ∞Ìã∞Ïñ¥']=='Tier 1']['ÌòÑÏû¨ÎπÑÏ§ë(%)'].iloc[0] - tier_summary[tier_summary['ÏûêÏÇ∞Ìã∞Ïñ¥']=='Tier 1']['Î™©ÌëúÎπÑÏ§ë(%)'].iloc[0] if not tier_summary[tier_summary['ÏûêÏÇ∞Ìã∞Ïñ¥']=='Tier 1'].empty else 0
    st.markdown("##### Ï¢ÖÌï© ÏßÑÎã®"); st.info(f"""- **ÏûêÏÇ∞ Î∞∞Î∂Ñ:** {'ÏΩîÏñ¥ ÎπÑÏ§ë ÏïàÏ†ïÏ†Å.' if core_gap > -10 else f'**ÏΩîÏñ¥ ÎπÑÏ§ëÏù¥ Î™©Ìëú ÎåÄÎπÑ {abs(core_gap):.1f}% Î∂ÄÏ°±.**'}\n- **Í∞ÄÏö© Ïã§ÌÉÑ:** **{available_cash:,.0f}Ïõê**Ïùò ÏûëÏ†Ñ ÏûêÍ∏à Ï§ÄÎπÑ ÏôÑÎ£å.\n- **ÏãúÏû• ÏÉÅÌô©:** ÌòÑÏû¨ Í∏∞Ìöå ÏßÄÏàòÎäî **{total_score}Ï†ê**ÏúºÎ°ú, **'{guidance.split('.')[0]}'** ÏûÖÎãàÎã§.""")
    tier_order = ['Tier 1', 'Tier 2', 'Tier 3']; tier_summary['ÏûêÏÇ∞Ìã∞Ïñ¥'] = pd.Categorical(tier_summary['ÏûêÏÇ∞Ìã∞Ïñ¥'], categories=tier_order, ordered=True); tier_summary = tier_summary.sort_values('ÏûêÏÇ∞Ìã∞Ïñ¥')
    fig = go.Figure();
    for index, row in tier_summary.iterrows():
        tier, current_val, target_val = row['ÏûêÏÇ∞Ìã∞Ïñ¥'], row['ÌòÑÏû¨ÎπÑÏ§ë(%)'], row['Î™©ÌëúÎπÑÏ§ë(%)']
        show_legend_current, show_legend_target = (index == 0), (index == 0)
        if current_val >= target_val:
            fig.add_trace(go.Bar(x=[tier], y=[current_val], name='ÌòÑÏû¨ ÎπÑÏ§ë', marker_color='#1f77b4', showlegend=show_legend_current, text=f"{current_val:.1f}%", textposition='outside'))
            fig.add_trace(go.Bar(x=[tier], y=[target_val], name='Î™©Ìëú ÎπÑÏ§ë', marker_color='lightgray', showlegend=show_legend_target, text=f"{target_val:.1f}%", textposition='inside'))
        else:
            fig.add_trace(go.Bar(x=[tier], y=[target_val], name='Î™©Ìëú ÎπÑÏ§ë', marker_color='lightgray', showlegend=show_legend_target, text=f"{target_val:.1f}%", textposition='outside'))
            fig.add_trace(go.Bar(x=[tier], y=[current_val], name='ÌòÑÏû¨ ÎπÑÏ§ë', marker_color='#1f77b4', showlegend=show_legend_current, text=f"{current_val:.1f}%", textposition='inside'))
    fig.update_layout(title_text="Ïö¥Ïö© ÏûêÏÇ∞ Ìã∞Ïñ¥Î≥Ñ ÎπÑÏ§ë (Í∏∞Î∞ò ÏûêÏÇ∞ Ï†úÏô∏)", barmode='overlay', yaxis_title='ÎπÑÏ§ë (%)', legend_title_text=None, uniformtext_minsize=8, uniformtext_mode='hide')
    st.plotly_chart(fig, use_container_width=True)

    st.divider()

    # ==============================================================================
    # --- Î™®Îìà 3: ÏßÄÎä•Ìòï Í∏∞Ìöå Ìè¨Ï∞© Î†àÏù¥Îçî (v6.9) ---
    # ==============================================================================
    st.subheader("üì° ÏßÄÎä•Ìòï Í∏∞Ìöå Ìè¨Ï∞© Î†àÏù¥Îçî v6.9")

    sensitivity_level = st.radio(
        "Í∞êÏãú ÎØºÍ∞êÎèÑ ÏÑ§Ï†ï:",
        ('ÏóÑÍ≤©ÌïòÍ≤å (Strict)', 'Ï§ëÍ∞Ñ (Normal)', 'ÎÑêÎÑêÌïòÍ≤å (Loose)'),
        index=1, horizontal=True, key='sensitivity'
    )
    
    sensitivity_map = {
        'ÏóÑÍ≤©ÌïòÍ≤å (Strict)': 'Strict', 'Ï§ëÍ∞Ñ (Normal)': 'Normal', 'ÎÑêÎÑêÌïòÍ≤å (Loose)': 'Loose'
    }
    selected_sensitivity = sensitivity_map[sensitivity_level]

    # ÎØºÍ∞êÎèÑ ÌååÎùºÎØ∏ÌÑ∞ Ïû¨ÏÑ§Í≥Ñ (ÏïÑÎßàÏ°¥ ÏºÄÏù¥Ïä§ Î∞òÏòÅ)
    sensitivity_params = {
        'Strict': {'tier1_bb_dev': -3, 'tier1_ma_dev': -10, 'tier1_rsi': 35, 'tier1_vol': 1.5, 'tier2_bb_dev': -6, 'tier2_ma_dev': -18, 'tier2_rsi': 30, 'tier2_vol': 2.0, 'tier4_bb_dev': -4, 'tier4_ma_dev': -12, 'tier4_rsi': 30, 'tier4_vol': 1.5},
        'Normal': {'tier1_bb_dev': -2, 'tier1_ma_dev': -6,  'tier1_rsi': 40, 'tier1_vol': 1.2, 'tier2_bb_dev': -5, 'tier2_ma_dev': -15, 'tier2_rsi': 35, 'tier2_vol': 1.5, 'tier4_bb_dev': -3, 'tier4_ma_dev': -10, 'tier4_rsi': 35, 'tier4_vol': 1.2},
        'Loose':  {'tier1_bb_dev': -1, 'tier1_ma_dev': -5,  'tier1_rsi': 45, 'tier1_vol': 1.0, 'tier2_bb_dev': -4, 'tier2_ma_dev': -12, 'tier2_rsi': 40, 'tier2_vol': 1.2, 'tier4_bb_dev': -2, 'tier4_ma_dev': -8,  'tier4_rsi': 40, 'tier4_vol': 1.0}
    }
    current_params = sensitivity_params[selected_sensitivity]

    with st.expander("‚ÑπÔ∏è v6.9 Î†àÏù¥Îçî Í∑úÏπô: 'ÌïòÏù¥Î∏åÎ¶¨Îìú' ÏãúÏä§ÌÖú"):
        st.markdown(f"""
        **'ÏßÄÎä•Ìòï Î†àÏù¥Îçî v6.9'** ÏùÄ **ÌïòÏù¥Î∏åÎ¶¨Îìú Í∞ÄÍ≤© Îß§Î†•ÎèÑ**ÏôÄ **ÏÉÅÏÑ∏ ÏàòÏπò**Î•º ÌÜµÌï¥ Î∂ÑÏÑùÏùò Ï†ïÌôïÏÑ±Í≥º ÏßÅÍ¥ÄÏÑ±ÏùÑ Í∑πÎåÄÌôîÌï©ÎãàÎã§.

        ---
        #### ‚úÖ 4ÎåÄ Î∂ÑÏÑù Ï≤¥ÌÅ¨Î¶¨Ïä§Ìä∏
        - **Í∞ÄÍ≤© Îß§Î†•ÎèÑ:** **Î≥ºÎ¶∞Ï†Ä Î∞¥Îìú** ÎòêÎäî **50Ïùº Ïù¥ÌèâÏÑ†** Í∏∞Ï§Ä Ï§ë ÌïòÎÇòÎùºÎèÑ Ï∂©Ï°±ÌïòÎ©¥ ÌÜµÍ≥º (OR Ï°∞Í±¥)
        - **ÏóêÎÑàÏßÄ ÏùëÏ∂ï:** RSI ÏßÄÌëú (Í≥ºÎß§ÎèÑ ÏÉÅÌÉúÏóê ÏßÑÏûÖÌñàÎäîÍ∞Ä?)
        - **Ï∂îÏÑ∏ Ï†ÑÌôò:** MACD Í≥®Îì†ÌÅ¨Î°úÏä§ (ÌïòÎùΩÏùÑ Î©àÏ∂îÍ≥† ÏÉÅÏäπÏúºÎ°ú Ï†ÑÌôòÌïòÎäîÍ∞Ä?)
        - **ÏãúÏû• ÎèôÏùò:** Í±∞ÎûòÎüâ ÎπÑÏú® (ÏãúÏû•Ïùò Í¥ÄÏã¨Ïù¥ Ïè†Î†§ÏûàÎäîÍ∞Ä?)
        ---
        #### üö¶ ÏÉÅÌÉú Ïö∞ÏÑ†ÏàúÏúÑ
        `üü¢ Ìè¨Ï∞©` > `üü° Í∞êÏãú` > `‚ö° Î≥ÄÎèôÏÑ±` > `‚ö™Ô∏è ÏïàÏ†ï` > `‚ö†Ô∏è Í≥ºÏó¥`
        - **Î≥ÄÎèôÏÑ±:** Îã§Î•∏ Ï°∞Í±¥ÏùÄ ÎßåÏ°±ÌïòÏßÄ Î™ªÌñàÏúºÎÇò, 3ÏùºÍ∞Ñ -7% Ïù¥ÏÉÅ Í∏âÎùΩÌïòÏó¨ Ï£ºÎ™©Ïù¥ ÌïÑÏöîÌïú ÏÉÅÌÉú.
        - **Í≥ºÏó¥:** Îã§Î•∏ Î™®Îì† Ï°∞Í±¥Î≥¥Îã§ Ïö∞ÏÑ†ÌïòÎäî Î¶¨Ïä§ÌÅ¨ Í¥ÄÎ¶¨ Ïã†Ìò∏. (3ÏùºÍ∞Ñ +7% Ïù¥ÏÉÅ Í∏âÎì±)
        ---
        #### üéØ ÌòÑÏû¨ ÎØºÍ∞êÎèÑ Í∏∞Ï§Ä ('{sensitivity_level}')
        - **Tier 1:**
            - `Í∞ÄÍ≤© Îß§Î†•ÎèÑ`: BB ‚â§ {current_params['tier1_bb_dev']}% ÎòêÎäî MA ‚â§ {current_params['tier1_ma_dev']}%
            - `ÏóêÎÑàÏßÄ ÏùëÏ∂ï`: RSI ‚â§ {current_params['tier1_rsi']}
            - `ÏãúÏû• ÎèôÏùò`: Í±∞ÎûòÎüâ ‚â• {current_params['tier1_vol']}Î∞∞
        - **Tier 2:**
            - `Í∞ÄÍ≤© Îß§Î†•ÎèÑ`: BB ‚â§ {current_params['tier2_bb_dev']}% ÎòêÎäî MA ‚â§ {current_params['tier2_ma_dev']}%
            - `ÏóêÎÑàÏßÄ ÏùëÏ∂ï`: RSI ‚â§ {current_params['tier2_rsi']}
            - `Ï∂îÏÑ∏ Ï†ÑÌôò`: MACD Í≥®Îì†ÌÅ¨Î°úÏä§ Î∞úÏÉù
            - `ÏãúÏû• ÎèôÏùò`: Í±∞ÎûòÎüâ ‚â• {current_params['tier2_vol']}Î∞∞
        - **Tier 4:**
            - `Í∞ÄÍ≤© Îß§Î†•ÎèÑ`: BB ‚â§ {current_params['tier4_bb_dev']}% ÎòêÎäî MA ‚â§ {current_params['tier4_ma_dev']}%
            - `ÏóêÎÑàÏßÄ ÏùëÏ∂ï`: RSI ‚â§ {current_params['tier4_rsi']}
            - `ÏãúÏû• ÎèôÏùò`: Í±∞ÎûòÎüâ ‚â• {current_params['tier4_vol']}Î∞∞
        """)

    radar_list = []
    monitor_df = df[~df['ÏûêÏÇ∞Ìã∞Ïñ¥'].isin(['ÌòÑÍ∏à', 'Í∏∞Î∞ò'])].copy()

    for index, row in monitor_df.iterrows():
        ticker, tier = row['Ï¢ÖÎ™©ÏΩîÎìú'], row['ÏûêÏÇ∞Ìã∞Ïñ¥']
        if tier not in ['Tier 1', 'Tier 2', 'Tier 4']:
            tier = 'Tier 4'

        stock_info = stock_data.get(ticker)
        if stock_info:
            analysis_result = analyze_stock_v6_9(stock_info, tier, current_params)
            if analysis_result:
                radar_list.append(analysis_result)

    if radar_list:
        radar_df = pd.DataFrame(radar_list)
        radar_df_display = radar_df[['ÏÉÅÌÉú', 'Ï¢ÖÎ™©Î™Ö', 'Ìã∞Ïñ¥', 'Í∞ÄÍ≤© Îß§Î†•ÎèÑ', 'ÏóêÎÑàÏßÄ ÏùëÏ∂ï', 'Ï∂îÏÑ∏ Ï†ÑÌôò', 'ÏãúÏû• ÎèôÏùò', 'status_order']]
        radar_df_display = radar_df_display.sort_values(by='status_order').drop(columns=['status_order'])
        
        st.dataframe(
            radar_df_display,
            use_container_width=True,
            hide_index=True,
            column_config={
                "ÏÉÅÌÉú": st.column_config.TextColumn("ÏÉÅÌÉú", width="small"),
                "Ï¢ÖÎ™©Î™Ö": st.column_config.TextColumn("Ï¢ÖÎ™©Î™Ö", width="small"),
                "Ìã∞Ïñ¥": st.column_config.TextColumn("Ìã∞Ïñ¥", width="small"),
            }
        )
    else:
        st.warning("‚ö†Ô∏è **Î†àÏù¥Îçî Îç∞Ïù¥ÌÑ∞ ÏóÜÏùå:** Î∂ÑÏÑù Í∞ÄÎä•Ìïú Ï¢ÖÎ™© Îç∞Ïù¥ÌÑ∞Í∞Ä ÏóÜÏäµÎãàÎã§.")
    
    st.divider()
    st.subheader("üìã Ìè¨Ìä∏Ìè¥Î¶¨Ïò§ ÏÉÅÏÑ∏ ÎÇ¥Ïó≠")
    st.dataframe(df, hide_index=True)
    
    # --- Î™®Îìà 4: GEM: Finance Î≥¥Í≥†Ïö© Î∏åÎ¶¨Ìïë ÏÉùÏÑ± ---
    st.subheader("‚ú® GEM: Finance Î≥¥Í≥†Ïö© Î∏åÎ¶¨Ìïë ÏÉùÏÑ±")
    if st.button("ÏõêÌÅ¥Î¶≠ Î∏åÎ¶¨Ìïë ÏÉùÏÑ±"):
        guidance = "üî• Ïó≠Îß§Ïàò ÏûëÏ†Ñ Í≥†Î†§" if total_score >= 7 else "üü° Í∏∞Ìöå Í∞êÏãú Í∞ïÌôî" if total_score >= 4 else "‚ö™Ô∏è ÌõàÎ†®Ïùò ÎÇ†"
        
        if 'radar_df' in locals() and not radar_df.empty:
            significant_alerts = radar_df[radar_df['ÏÉÅÌÉú'].isin(['üü¢ Ìè¨Ï∞©', 'üü° Í∞êÏãú', '‚ö° Î≥ÄÎèôÏÑ±'])]
            
            if not significant_alerts.empty:
                alerts_text = ""
                for _, row in significant_alerts.iterrows():
                    alerts_text += (f"- **{row['Ï¢ÖÎ™©Î™Ö']}** ({row['Ìã∞Ïñ¥']}): {row['ÏÉÅÌÉú']} | "
                                    f"Í∞ÄÍ≤©: {row['Í∞ÄÍ≤© Îß§Î†•ÎèÑ']}, "
                                    f"ÏóêÎÑàÏßÄ: {row['ÏóêÎÑàÏßÄ ÏùëÏ∂ï']}, "
                                    f"Ï∂îÏÑ∏: {row['Ï∂îÏÑ∏ Ï†ÑÌôò']}, "
                                    f"Í±∞ÎûòÎüâ: {row['ÏãúÏû• ÎèôÏùò']}\n")
            else:
                alerts_text = "ÌòÑÏû¨ Ìè¨Ï∞©Îêú Ïú†ÏùòÎØ∏Ìïú Îß§Ïàò/Í∞êÏãú/Î≥ÄÎèôÏÑ± Ïã†Ìò∏Îäî ÏóÜÏäµÎãàÎã§."
        else:
            alerts_text = "Î†àÏù¥Îçî Îç∞Ïù¥ÌÑ∞Í∞Ä ÏóÜÏñ¥ Î∂ÑÏÑùÌï† Ïã†Ìò∏Í∞Ä ÏóÜÏäµÎãàÎã§."

        briefing = f"""
### 1. Ï†ÑÏû• ÏÉÅÌô© Î∏åÎ¶¨Ìïë
- **Ï¢ÖÌï© Í∏∞Ìöå ÏßÄÏàò:** {total_score}Ï†ê
- **ÌñâÎèô ÏßÄÏπ®:** {guidance}

### 2. Í∏∞Ìöå Ìè¨Ï∞© Î†àÏù¥Îçî ÌòÑÌô© (v6.9)
{alerts_text}

### 3. ÏßàÎ¨∏
ÏúÑ ÏÉÅÌô©ÏùÑ Ï∞∏Í≥† Î∞è Í≤ÄÏ¶ùÌïòÍ≥†, Ïò§ÎäòÏùò Ï¶ùÏãúÎ•º Î≥¥Í≥†Ìï¥Ï£ºÏÑ∏Ïöî.
"""
        st.text_area("ÏïÑÎûò ÎÇ¥Ïö©ÏùÑ Î≥µÏÇ¨ÌïòÏó¨ GEM: FinanceÏóê ÏßàÎ¨∏ÌïòÏÑ∏Ïöî.", briefing, height=300)

else:
    st.info("Ïª®Ìä∏Î°§ Ìå®ÎÑêÏóê Ìè¨Ìä∏Ìè¥Î¶¨Ïò§ ÏóëÏÖÄ ÌååÏùºÏùÑ ÏóÖÎ°úÎìúÌïòÎ©¥ ÏïÑÍµ∞ ÌòÑÌô© Î∞è Í∏∞Ìöå Ìè¨Ï∞© Î†àÏù¥ÎçîÍ∞Ä ÌôúÏÑ±ÌôîÎê©ÎãàÎã§.")
